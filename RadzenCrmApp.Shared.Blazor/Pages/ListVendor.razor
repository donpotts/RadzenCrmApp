@page "/vendor"
@inject AppService AppService
@inject NotificationService NotificationService
@inject DialogService DialogService
@inject HttpClient HttpClient
@attribute [Authorize]

<PageTitle>Vendor</PageTitle>

<RadzenText TextStyle="TextStyle.H2" TagName="TagName.H1">Vendor</RadzenText>

<RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End" class="rz-mb-3">
    <RadzenButton Text="Add" Icon="add_circle_outline" Click=@(args => AddRow()) />
</RadzenStack>

<RadzenDataGrid @ref="grid" Data="@records" LoadData="@LoadData" IsLoading="@isLoading" Count="@count" AllowSorting="true" AllowFiltering="true" AllowPaging="true" PageSize="5" TItem="Vendor" ColumnWidth="160px">
    <Columns>
        <RadzenDataGridColumn TItem="Vendor" Property="Id" Title="Id" />
        <RadzenDataGridColumn TItem="Vendor" Property="Name" Title="Name" />
        <RadzenDataGridColumn TItem="Vendor" Property="ContactName" Title="ContactName" />
        <RadzenDataGridColumn TItem="Vendor" Property="Phone" Title="Phone" />
        <RadzenDataGridColumn TItem="Vendor" Property="Email" Title="Email" />
        <RadzenDataGridColumn TItem="Vendor" Title="Logo" Context="record" Sortable="false" Filterable="false">
            <Template>
                @if (!string.IsNullOrEmpty(record.Logo))
                {
                    <RadzenImage Path="@GetAbsoluteUri(record.Logo)" Style="width:128px;height:128px;object-fit:contain;" />
                }
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Vendor" Property="Notes" Title="Notes" />
        <RadzenDataGridColumn TItem="Vendor" Property="Address.City" Title="Address" />
        <RadzenDataGridColumn TItem="Vendor" Title="Product" Context="record" Sortable="false" Filterable="false">
            <Template>
                @string.Join(", ", record.Product?.Select(x => x.Name?.ToString() ?? string.Empty) ?? [])
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Vendor" Title="Service" Context="record" Sortable="false" Filterable="false">
            <Template>
                @string.Join(", ", record.Service?.Select(x => x.Name?.ToString() ?? string.Empty) ?? [])
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Vendor" Context="record" Sortable="false" Filterable="false" TextAlign="TextAlign.Right" Width="100px">
            <Template>
                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(record))" />
                <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => DeleteRow(record))" />
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {
    private bool isLoading;
    private IEnumerable<Vendor>? records;
    private int count;
    private RadzenDataGrid<Vendor>? grid;

    private string GetAbsoluteUri(string uri)
    {
        if (!uri.StartsWith("/"))
        {
            return uri;
        }

        var baseUri = HttpClient.BaseAddress;

        if (baseUri == null)
        {
            throw new Exception("Unable to determine base address");
        }

        Uri absolute = new(baseUri, uri);

        return absolute.ToString();
    }

    private async Task LoadData(LoadDataArgs args)
    {
        isLoading = true;

        var result = await AppService.ListVendorAsync(args.Filter, args.Top, args.Skip, args.OrderBy, "Address,Product,Service", count: true);
        records = result.Value.AsODataEnumerable();
        count = result.Count;

        isLoading = false;
    }

    private async Task AddRow()
    {
        await DialogService.OpenAsync<AddVendor>("Add Vendor");
        grid?.Reload();
    }

    private async Task EditRow(Vendor record)
    {
        await DialogService.OpenAsync<UpdateVendor>("Update Vendor", new() { { "Id", record.Id } });
        grid?.Reload();
    }

    private async Task DeleteRow(Vendor record)
    {
        try
        {
            if (await DialogService.Confirm("Are you sure you want to delete this record?") == true)
            {
                await AppService.DeleteVendorAsync(record.Id!.Value);
                grid?.Reload();
            }
        }
        catch (Exception ex)
        {
            NotificationMessage message = new()
            {
                Severity = NotificationSeverity.Error,
                Summary = "Delete Failed",
                Detail = ex.Message,
                Duration = 4000
            };

            NotificationService.Notify(message);
        }
    }
}
